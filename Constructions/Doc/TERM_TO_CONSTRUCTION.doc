\DOC TERM_TO_CONSTRUCTION

\TYPE {TERM_TO_CONSTRUCTION : term -> thm}

\SYNOPSIS
Returns theorem asserting that the quotation of a term is equivelant to it's syntactical structure

\KEYWORDS
quotation, equality, construction.

\DESCRIBE
{TERM_TO_CONSTRUCTION} maps any term {`Q_ t _Q`} to the corresponding theorem {|- Q_ t _Q = EpsilonConstruction(t)} where {EpsilonConstruction} are elements of the {Epsilon} type that represent the syntax of {t}.

\FAILURE
Fails if the given term is not quoted or if an attempt is made to convert a mistyped quotation.

\EXAMPLE
{
	# TERM_TO_CONSTRUCTION `Q_ T _Q`;;
	val it : thm = |- Q_ T _Q = QuoConst "T" (TyBase "bool")
	  
	# TERM_TO_CONSTRUCTION `Q_ (T \/ F) _Q`;;
	val it : thm =
	|- Q_ (T \/ F) _Q =
	App
	(App
	(QuoConst "\\/"
	(TyBiCons "fun" (TyBase "bool")
	(TyBiCons "fun" (TyBase "bool") (TyBase "bool"))))
	(QuoConst "T" (TyBase "bool")))
	(QuoConst "F" (TyBase "bool"))
}

\COMMENTS
This can be used to reason about the syntax of a given expression, or convert a syntax tree back into a quoted expression through the use of rewrite and symmetry conversions. A proper inverse function will most likely be added in the future. 

\SEEALSO
TERM_TO_CONSTRUCTION_CONV, TERM_TO_CONSTRUCTION_TAC

\ENDDOC
